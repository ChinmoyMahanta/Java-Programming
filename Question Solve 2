1. Grade Calculator with Multiple Decision Points
import java.util.Scanner;

class GradeCalculator {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter marks out of 100: ");
        int marks = sc.nextInt();

        if (marks >= 90) {
            System.out.println("Grade: A+");
        } else if (marks >= 80) {
            System.out.println("Grade: A");
        } else if (marks >= 70) {
            System.out.println("Grade: B+");
        } else if (marks >= 60) {
            System.out.println("Grade: B");
        } else if (marks >= 50) {
            System.out.println("Grade: C");
        } else if (marks >= 40) {
            System.out.println("Grade: D");
        } else {
            System.out.println("Grade: Fail");
        }
        sc.close();
    }
}

2. Pattern Printing with Nested Loops (Example: Pyramid)
class PatternPrinting {
    public static void main(String[] args) {
        int n = 5; // number of rows

        for (int i = 1; i <= n; i++) {
            // print spaces
            for (int j = i; j < n; j++) {
                System.out.print(" ");
            }

            // print stars
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }

            System.out.println();
        }
    }
}

3. Classes and Objects 

i. Student Management System
class Student {
    private int rollNo;
    private String name;
    private double marks;

    // Constructor
    public Student(int rollNo, String name, double marks) {
        this.rollNo = rollNo;
        this.name = name;
        this.marks = marks;
    }

    // Display method
    public void display() {
        System.out.println("Roll No: " + rollNo + ", Name: " + name + ", Marks: " + marks);
    }

    // Main method
    public static void main(String[] args) {
        Student[] students = new Student[3];
        students[0] = new Student(1, "Ravi", 85.5);
        students[1] = new Student(2, "Priya", 90.0);
        students[2] = new Student(3, "Amit", 78.5);

        for (Student s : students) {
            s.display();
        }
    }
}

ii. Bank Account Management System
class BankAccount {
    private int accNo;
    private String name;
    private double balance;

    // Constructor
    public BankAccount(int accNo, String name, double balance) {
        this.accNo = accNo;
        this.name = name;
        this.balance = balance;
    }

    // Deposit method
    public void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited " + amount + ". New balance: " + balance);
    }

    // Withdraw method
    public void withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn " + amount + ". New balance: " + balance);
        } else {
            System.out.println("Insufficient funds.");
        }
    }

    // Display method
    public void display() {
        System.out.println("Acc No: " + accNo + ", Name: " + name + ", Balance: " + balance);
    }

    // Main method
    public static void main(String[] args) {
        BankAccount ba = new BankAccount(1001, "Anita", 5000.0);
        ba.display();
        ba.deposit(2000.0);
        ba.withdraw(1500.0);
        ba.withdraw(6000.0); // Test insufficient funds
    }
}

4. Complex Number Operations with Constructor Overloading
class Complex {
    private int real;
    private int imag;

    // Default constructor
    public Complex() {
        real = 0;
        imag = 0;
    }

    // Parameterised constructor
    public Complex(int r, int i) {
        real = r;
        imag = i;
    }

    // Addition method
    public Complex add(Complex c) {
        Complex result = new Complex();
        result.real = this.real + c.real;
        result.imag = this.imag + c.imag;
        return result;
    }

    // Display method
    public void display() {
        System.out.println(real + " + " + imag + "i");
    }

    // Main method
    public static void main(String[] args) {
        Complex c1 = new Complex(3, 2);
        Complex c2 = new Complex(1, 7);
        Complex c3 = c1.add(c2);

        System.out.print("First Complex Number: ");
        c1.display();
        System.out.print("Second Complex Number: ");
        c2.display();
        System.out.print("Sum: ");
        c3.display();
    }
}
