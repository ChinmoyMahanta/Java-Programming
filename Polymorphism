4. Polymorphism

Q1. Create a class Calculator with method multiply (int, int) and multiply (double, double) to
demonstrate method overloading.
class Calculator {
    int multiply(int a, int b) { return a*b; }
    double multiply(double a, double b) { return a*b; }
}

public class PolyDemo1 {
    public static void main(String[] args) {
        Calculator c = new Calculator();
        System.out.println("Int multiply: " + c.multiply(3,4));
        System.out.println("Double multiply: " + c.multiply(2.5,4.0));
    }
}

Q2. Write a program where a superclass Shape has method area(). Override it in Circle, Triangle,
and Rectangle classes using runtime polymorphism.
class Shape { void area(){ System.out.println("Area of Shape"); } }
class Circle extends Shape {
    void area(){ System.out.println("Circle area = πr²"); }
}
class Triangle extends Shape {
    void area(){ System.out.println("Triangle area = ½*b*h"); }
}
class Rectangle extends Shape {
    void area(){ System.out.println("Rectangle area = l*b"); }
}

public class PolyDemo2 {
    public static void main(String[] args) {
        Shape s;
        s=new Circle(); s.area();
        s=new Triangle(); s.area();
        s=new Rectangle(); s.area();
    }
}

Q3. Demonstrate instanceof keyword to check object types in an inheritance hierarchy.
class Animal {}
class Dog extends Animal {}
class Cat extends Animal {}

public class PolyDemo3 {
    public static void main(String[] args) {
        Animal a = new Dog();

        System.out.println(a instanceof Animal); // true
        System.out.println(a instanceof Dog);    // true
        System.out.println(a instanceof Cat);    // false
    }
}
