1. Create a class Product with properties(itemNo,name,price,quantity) and methods(Constructor,setters and getters and toString method). Create 5 objects using array of objects concepts and print the object details using toString method.
class Product {
    private int itemNo;
    private String name;
    private double price;
    private int quantity;

    public Product(int itemNo, String name, double price, int quantity) {
        this.itemNo = itemNo;
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public void setItemNo(int itemNo) {
        this.itemNo = itemNo;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public int getItemNo() {
        return itemNo;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    public String toString() {
        return "Item No: " + itemNo + ", Name: " + name + ", Price: " + price + ", Quantity: " + quantity;
    }

    public static void main(String[] args) {
        Product[] products = new Product[5];
        products[0] = new Product(1, "Pen", 10.5, 50);
        products[1] = new Product(2, "Notebook", 45.0, 30);
        products[2] = new Product(3, "Pencil", 5.0, 100);
        products[3] = new Product(4, "Eraser", 3.5, 80);
        products[4] = new Product(5, "Marker", 25.0, 20);

        for (int i = 0; i < products.length; i++) {
            System.out.println(products[i].toString());
        }
    }
}


2. Create a class Customer with properties(custId,name,address,phoneNo) and methods(Constructor,setters and getters and toString method). Create 5 objects using array of objects concepts and print the object details using toString method.
class Customer {
    private int custId;
    private String name;
    private String address;
    private String phoneNo;

    public Customer(int custId, String name, String address, String phoneNo) {
        this.custId = custId;
        this.name = name;
        this.address = address;
        this.phoneNo = phoneNo;
    }

    public void setCustId(int custId) {
        this.custId = custId;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setPhoneNo(String phoneNo) {
        this.phoneNo = phoneNo;
    }

    public int getCustId() {
        return custId;
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    public String getPhoneNo() {
        return phoneNo;
    }

    public String toString() {
        return "Customer ID: " + custId + ", Name: " + name + ", Address: " + address + ", Phone No: " + phoneNo;
    }

    public static void main(String[] args) {
        Customer[] customers = new Customer[5];
        customers[0] = new Customer(101, "Ravi", "Delhi", "9876543210");
        customers[1] = new Customer(102, "Priya", "Mumbai", "9123456780");
        customers[2] = new Customer(103, "Amit", "Chennai", "9988776655");
        customers[3] = new Customer(104, "Sneha", "Kolkata", "9876501234");
        customers[4] = new Customer(105, "Rahul", "Bangalore", "9012345678");

        for (int i = 0; i < customers.length; i++) {
            System.out.println(customers[i].toString());
        }
    }
}


3. Create a Parent class Account with properties(accNo,name, address, phoneNo, dob, balance) and methods(Constructor,setters and getters). Create a Derived class SavingAccount with methods(deposit() and withdraw() ). Create a main method to create the object and implement the Deposit and WithdrawÂ method.
class Account {
    private int accNo;
    private String name;
    private String address;
    private String phoneNo;
    private String dob;
    private double balance;

    public Account(int accNo, String name, String address, String phoneNo, String dob, double balance) {
        this.accNo = accNo;
        this.name = name;
        this.address = address;
        this.phoneNo = phoneNo;
        this.dob = dob;
        this.balance = balance;
    }

    public void setAccNo(int accNo) {
        this.accNo = accNo;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setPhoneNo(String phoneNo) {
        this.phoneNo = phoneNo;
    }

    public void setDob(String dob) {
        this.dob = dob;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public int getAccNo() {
        return accNo;
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    public String getPhoneNo() {
        return phoneNo;
    }

    public String getDob() {
        return dob;
    }

    public double getBalance() {
        return balance;
    }
}

class SavingAccount extends Account {

    public SavingAccount(int accNo, String name, String address, String phoneNo, String dob, double balance) {
        super(accNo, name, address, phoneNo, dob, balance);
    }

    public void deposit(double amount) {
        setBalance(getBalance() + amount);
        System.out.println("Deposited: " + amount + ", New Balance: " + getBalance());
    }

    public void withdraw(double amount) {
        if (amount <= getBalance()) {
            setBalance(getBalance() - amount);
            System.out.println("Withdrawn: " + amount + ", New Balance: " + getBalance());
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    public static void main(String[] args) {
        SavingAccount sa = new SavingAccount(2001, "Anita", "Delhi", "9876543210", "01-01-2000", 5000.0);
        sa.deposit(1500.0);
        sa.withdraw(2000.0);
        sa.withdraw(6000.0); // To show insufficient balance
    }
}
