7. Exception Handling

Q1. Write a Java program to take two numbers as input and divide them. Handle
ArithmeticException (divide by zero).
import java.util.Scanner;

public class ExDemo1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        try {
            System.out.print("Enter first number: ");
            int a = sc.nextInt();
            System.out.print("Enter second number: ");
            int b = sc.nextInt();

            int result = a / b;
            System.out.println("Result = " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: Cannot divide by zero!");
        }
    }
}

Q2. Write a program to handle ArrayIndexOutOfBoundsException when accessing an array
element.
public class ExDemo2 {
    public static void main(String[] args) {
        int[] arr = {10, 20, 30};
        try {
            System.out.println("Element at index 5 = " + arr[5]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Invalid array index!");
        }
    }
}

Q3. Create a program to accept age from the user. Throw and catch a user-defined exception if
age is less than 18.
import java.util.Scanner;

// Custom Exception
class UnderAgeException extends Exception {
    public UnderAgeException(String msg) {
        super(msg);
    }
}

public class ExDemo3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Age: ");
        int age = sc.nextInt();

        try {
            if (age < 18)
                throw new UnderAgeException("Age must be 18 or above!");
            else
                System.out.println("Valid age. You can proceed.");
        } catch (UnderAgeException e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
}
