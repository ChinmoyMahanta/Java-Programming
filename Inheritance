3. Inheritance

Q1. Create a class Person with name and age. Derive a class Teacher with additional fields
subject and salary. Show how inheritance works. 
class Person {
    String name; int age;
    Person(String n, int a) { name=n; age=a; }
    void display() { System.out.println("Name: "+name+", Age: "+age); }
}

class Teacher extends Person {
    String subject; double salary;
    Teacher(String n, int a, String s, double sal) {
        super(n,a); subject=s; salary=sal;
    }
    void show() {
        display();
        System.out.println("Subject: "+subject+", Salary: "+salary);
    }
}

public class InheritDemo1 {
    public static void main(String[] args) {
        Teacher t = new Teacher("Riya",30,"Maths",50000);
        t.show();
    }
}

Q2. Demonstrate constructor chaining in multilevel inheritance: Person → Employee →
Manager.
class Person {
    Person(){ System.out.println("Person Constructor"); }
}
class Employee extends Person {
    Employee(){ System.out.println("Employee Constructor"); }
}
class Manager extends Employee {
    Manager(){ System.out.println("Manager Constructor"); }
}

public class InheritDemo2 {
    public static void main(String[] args) {
        Manager m = new Manager();
    }
}

Q3. Create a class Animal with method sound(). Override it in Dog, Cat, and Cow classes to
show different animal sounds.
class Animal { void sound(){ System.out.println("Some sound"); } }
class Dog extends Animal { void sound(){ System.out.println("Bark"); } }
class Cat extends Animal { void sound(){ System.out.println("Meow"); } }
class Cow extends Animal { void sound(){ System.out.println("Moo"); } }

public class InheritDemo3 {
    public static void main(String[] args) {
        Animal a;
        a=new Dog(); a.sound();
        a=new Cat(); a.sound();
        a=new Cow(); a.sound();
    }
}

